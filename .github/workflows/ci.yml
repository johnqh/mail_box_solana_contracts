name: CI/CD - TypeScript Client Library

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Run client library tests
        run: |
          echo "Running TypeScript client library tests..."
          npx mocha dist/tests/types-utils.test.js --reporter spec
      
      - name: Test package import
        run: |
          echo "üß™ Testing package import with Node.js ${{ matrix.node-version }}"
          node -e "
            try {
              const pkg = require('./dist/app/index.js');
              console.log('‚úÖ Package imported successfully');
              console.log('Available exports:', Object.keys(pkg));
            } catch (error) {
              console.error('‚ùå Package import failed:', error.message);
              process.exit(1);
            }
          "

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run prettier -- --check
      
      - name: TypeScript compilation check
        run: npx tsc --noEmit

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          # Run audit but only fail on critical vulnerabilities
          npm audit --audit-level critical || true
          echo "‚ÑπÔ∏è  Allowing high-level vulnerabilities in dependencies"

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Verify package structure
        run: |
          echo "‚úÖ Checking package structure..."
          
          # Check if required directories exist
          [ -d "dist" ] && echo "‚úÖ dist/ directory exists" || (echo "‚ùå dist/ directory missing" && exit 1)
          
          # Check if main entry points exist
          [ -f "dist/app/index.js" ] && echo "‚úÖ Main entry point exists" || (echo "‚ùå Main entry point missing" && exit 1)
          [ -f "dist/app/index.d.ts" ] && echo "‚úÖ Type definitions exist" || (echo "‚ùå Type definitions missing" && exit 1)
          
          # List package contents
          echo "üì¶ Package contents:"
          ls -la dist/app/
          
          # Test package
          npm pack --dry-run
          echo "‚úÖ Package structure verified"
      
      - name: Publish to npm
        run: |
          # Only publish if version has changed
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view @johnqh/mail_box_solana_contracts version 2>/dev/null || echo "0.0.0")
          
          echo "Current version: $CURRENT_VERSION"
          echo "NPM version: $NPM_VERSION"
          
          if [ "$CURRENT_VERSION" != "$NPM_VERSION" ]; then
            echo "Publishing new version $CURRENT_VERSION..."
            npm publish --access public
            echo "‚úÖ Published @johnqh/mail_box_solana_contracts@$CURRENT_VERSION"
          else
            echo "‚ÑπÔ∏è  Version $CURRENT_VERSION already published, skipping"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  compatibility-check:
    name: Node.js Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20, 21]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Test package import
        run: |
          echo "üß™ Testing package import with Node.js ${{ matrix.node-version }}"
          node -e "
            try {
              const pkg = require('./dist/app/index.js');
              console.log('‚úÖ Package imported successfully');
              console.log('Available exports:', Object.keys(pkg));
            } catch (error) {
              console.error('‚ùå Package import failed:', error.message);
              process.exit(1);
            }
          "