name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SOLANA_CLI_VERSION: v1.18.0
  ANCHOR_CLI_VERSION: 0.29.0

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache Solana Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/solana
            ~/.local/share/solana
          key: solana-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            solana-${{ runner.os }}-
      
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-
      
      - name: Install Solana CLI
        run: |
          echo "Installing Solana CLI ${{ env.SOLANA_CLI_VERSION }}"
          
          # Create installation directory
          mkdir -p "$HOME/.local/share/solana"
          
          # Try multiple installation methods
          INSTALL_SUCCESS=false
          
          # Method 1: Direct download with retry
          for i in {1..3}; do
            echo "Attempt $i: Downloading Solana installer..."
            if curl -sSfL --connect-timeout 30 --max-time 300 "https://release.solana.com/${{ env.SOLANA_CLI_VERSION }}/install" -o /tmp/solana-install.sh; then
              echo "Download successful, running installer..."
              if bash /tmp/solana-install.sh; then
                INSTALL_SUCCESS=true
                break
              fi
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          # Method 2: Fallback to GitHub releases if direct install fails
          if [ "$INSTALL_SUCCESS" = "false" ]; then
            echo "Direct install failed, trying GitHub releases..."
            SOLANA_VERSION="1.18.0"
            ARCH="x86_64-unknown-linux-gnu"
            DOWNLOAD_URL="https://github.com/solana-labs/solana/releases/download/v${SOLANA_VERSION}/solana-release-${ARCH}.tar.bz2"
            
            echo "Downloading from: $DOWNLOAD_URL"
            if curl -L --connect-timeout 30 --max-time 300 "$DOWNLOAD_URL" -o /tmp/solana.tar.bz2; then
              cd "$HOME/.local/share/solana"
              tar -xjf /tmp/solana.tar.bz2
              mv solana-release install
              mkdir -p install/active_release
              mv install/bin install/active_release/
              INSTALL_SUCCESS=true
            fi
          fi
          
          # Verify installation
          if [ "$INSTALL_SUCCESS" = "true" ]; then
            export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            
            # Verify solana binary exists and works
            if [ -f "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
              "$HOME/.local/share/solana/install/active_release/bin/solana" --version
              echo "✅ Solana CLI installed successfully"
            else
              echo "❌ Solana binary not found after installation"
              ls -la "$HOME/.local/share/solana/install/active_release/bin/" || echo "Bin directory not found"
              exit 1
            fi
          else
            echo "❌ All Solana installation methods failed"
            exit 1
          fi
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Install Anchor CLI
        run: |
          echo "Installing Anchor CLI version ${{ env.ANCHOR_CLI_VERSION }}"
          
          # Install Anchor CLI via npm (works on Linux)
          if npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}; then
            echo "✅ Anchor CLI installed via npm"
          else
            echo "❌ npm installation failed, trying cargo..."
            # Fallback to cargo installation
            cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
            avm install ${{ env.ANCHOR_CLI_VERSION }}
            avm use ${{ env.ANCHOR_CLI_VERSION }}
          fi
      
      - name: Verify Solana installation
        run: |
          echo "Checking Solana installation..."
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          
          # Check if solana is in PATH
          if which solana; then
            echo "✅ Solana found in PATH"
            solana --version
          else
            echo "Solana not in PATH, trying direct path..."
            if [ -f "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
              "$HOME/.local/share/solana/install/active_release/bin/solana" --version
            else
              echo "❌ Solana binary not found"
              ls -la "$HOME/.local/share/solana/install/active_release/" || echo "Install directory not found"
              exit 1
            fi
          fi
          
          # Verify Anchor
          echo "Verifying Anchor installation..."
          if anchor --version; then
            echo "✅ Anchor CLI working"
          else
            echo "❌ Anchor CLI not working, trying alternative installation..."
            # Alternative: use avm if anchor command fails
            if ! which avm; then
              echo "Installing avm..."
              cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
            fi
            avm install ${{ env.ANCHOR_CLI_VERSION }}
            avm use ${{ env.ANCHOR_CLI_VERSION }}
            anchor --version
          fi
          
          # Set Solana config
          solana config set --url https://api.devnet.solana.com
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Solana programs
        run: |
          echo "Building Anchor programs..."
          
          # Ensure cargo-build-sbf is available
          if ! which cargo-build-sbf; then
            echo "Installing cargo-build-sbf..."
            cargo install --git https://github.com/solana-labs/solana cargo-build-sbf --locked
          fi
          
          # Build with anchor
          anchor build
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Start test validator
        run: |
          echo "Starting Solana test validator..."
          solana-test-validator --reset &
          sleep 15
          solana config set --url http://localhost:8899
          timeout 30 bash -c 'until solana cluster-version; do sleep 1; done'
      
      - name: Run tests
        run: |
          anchor test --skip-local-validator
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 18  # Only upload once
        with:
          name: build-artifacts
          path: |
            target/idl/
            target/types/
            dist/
          retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run prettier -- --check
      
      - name: TypeScript compilation check
        run: npx tsc --noEmit

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level high
      
      - name: Check for package vulnerabilities
        run: |
          # Check if there are any high or critical vulnerabilities
          AUDIT_RESULT=$(npm audit --json --audit-level high 2>/dev/null || echo '{"vulnerabilities": {}}')
          echo "Audit result: $AUDIT_RESULT"
          
          # Parse and report vulnerabilities
          HIGH_VULN=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULN=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULN"
          echo "Critical vulnerabilities: $CRITICAL_VULN"
          
          if [ "$HIGH_VULN" -gt 0 ] || [ "$CRITICAL_VULN" -gt 0 ]; then
            echo "⚠️ Found security vulnerabilities"
            npm audit --audit-level high
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Cache Solana Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/solana
            ~/.local/share/solana
          key: solana-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install Solana CLI
        run: |
          echo "Installing Solana CLI ${{ env.SOLANA_CLI_VERSION }}"
          
          # Create installation directory
          mkdir -p "$HOME/.local/share/solana"
          
          # Try multiple installation methods
          INSTALL_SUCCESS=false
          
          # Method 1: Direct download with retry
          for i in {1..3}; do
            echo "Attempt $i: Downloading Solana installer..."
            if curl -sSfL --connect-timeout 30 --max-time 300 "https://release.solana.com/${{ env.SOLANA_CLI_VERSION }}/install" -o /tmp/solana-install.sh; then
              echo "Download successful, running installer..."
              if bash /tmp/solana-install.sh; then
                INSTALL_SUCCESS=true
                break
              fi
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
          
          # Method 2: Fallback to GitHub releases if direct install fails
          if [ "$INSTALL_SUCCESS" = "false" ]; then
            echo "Direct install failed, trying GitHub releases..."
            SOLANA_VERSION="1.18.0"
            ARCH="x86_64-unknown-linux-gnu"
            DOWNLOAD_URL="https://github.com/solana-labs/solana/releases/download/v${SOLANA_VERSION}/solana-release-${ARCH}.tar.bz2"
            
            echo "Downloading from: $DOWNLOAD_URL"
            if curl -L --connect-timeout 30 --max-time 300 "$DOWNLOAD_URL" -o /tmp/solana.tar.bz2; then
              cd "$HOME/.local/share/solana"
              tar -xjf /tmp/solana.tar.bz2
              mv solana-release install
              mkdir -p install/active_release
              mv install/bin install/active_release/
              INSTALL_SUCCESS=true
            fi
          fi
          
          # Verify installation
          if [ "$INSTALL_SUCCESS" = "true" ]; then
            export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
            echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
            
            # Verify solana binary exists and works
            if [ -f "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
              "$HOME/.local/share/solana/install/active_release/bin/solana" --version
              echo "✅ Solana CLI installed successfully"
            else
              echo "❌ Solana binary not found after installation"
              ls -la "$HOME/.local/share/solana/install/active_release/bin/" || echo "Bin directory not found"
              exit 1
            fi
          else
            echo "❌ All Solana installation methods failed"
            exit 1
          fi
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Install Anchor CLI
        run: |
          echo "Installing Anchor CLI version ${{ env.ANCHOR_CLI_VERSION }}"
          
          # Install Anchor CLI via npm (works on Linux)
          if npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_CLI_VERSION }}; then
            echo "✅ Anchor CLI installed via npm"
          else
            echo "❌ npm installation failed, trying cargo..."
            # Fallback to cargo installation
            cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
            avm install ${{ env.ANCHOR_CLI_VERSION }}
            avm use ${{ env.ANCHOR_CLI_VERSION }}
          fi
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Solana programs
        run: |
          echo "Building Anchor programs..."
          
          # Ensure cargo-build-sbf is available
          if ! which cargo-build-sbf; then
            echo "Installing cargo-build-sbf..."
            cargo install --git https://github.com/solana-labs/solana cargo-build-sbf --locked
          fi
          
          # Build with anchor
          anchor build
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Verify package structure
        run: |
          echo "✅ Checking package structure..."
          
          # Check if required directories exist
          [ -d "dist" ] && echo "✅ dist/ directory exists" || (echo "❌ dist/ directory missing" && exit 1)
          [ -d "target/idl" ] && echo "✅ target/idl/ directory exists" || (echo "❌ target/idl/ directory missing" && exit 1)
          [ -d "target/types" ] && echo "✅ target/types/ directory exists" || (echo "❌ target/types/ directory missing" && exit 1)
          
          # Check if main entry points exist
          [ -f "dist/app/index.js" ] && echo "✅ Main entry point exists" || (echo "❌ Main entry point missing" && exit 1)
          [ -f "dist/app/index.d.ts" ] && echo "✅ Type definitions exist" || (echo "❌ Type definitions missing" && exit 1)
          
          # Check IDL files
          find target/idl -name "*.json" | head -5 | while read file; do
            echo "✅ IDL file: $file"
          done
          
          # List package contents
          echo "📦 Package contents:"
          ls -la dist/
          ls -la target/idl/
          ls -la target/types/
      
      - name: Test package installation simulation
        run: |
          echo "📦 Simulating package installation..."
          npm pack --dry-run
          echo "✅ Package would install successfully"

  compatibility-check:
    name: Node.js Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build TypeScript library
        run: npm run build
      
      - name: Test package import
        run: |
          echo "🧪 Testing package import with Node.js ${{ matrix.node-version }}"
          node -e "
            try {
              const pkg = require('./dist/app/index.js');
              console.log('✅ Package imported successfully');
              console.log('Available exports:', Object.keys(pkg));
            } catch (error) {
              console.error('❌ Package import failed:', error.message);
              process.exit(1);
            }
          "